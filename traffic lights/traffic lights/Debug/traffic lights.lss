
traffic lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000709  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002057  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a1f  00000000  00000000  0000292d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b1f  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00003e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d6  00000000  00000000  0000415c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000798  00000000  00000000  00004432  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000646  00000646  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.App_init 00000042  000004d0  000004d0  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ped_mode 000000a8  00000168  00000168  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 00000026  0000057a  0000057a  0000062e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.clear_interrupt 00000006  00000634  00000634  000006e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.wait_interrupt 00000092  00000210  00000210  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LED_blink_interrupt 00000030  0000054a  0000054a  000005fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.Normal_mode 0000008a  00000334  00000334  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.appStart 00000006  0000063a  0000063a  000006ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.overflowCounterapp 00000001  00800062  00800062  00000709  2**0
                  ALLOC
 23 .bss.interrupted 00000001  00800063  00800063  00000709  2**0
                  ALLOC
 24 .bss.pressed  00000001  00800064  00800064  00000709  2**0
                  ALLOC
 25 .data.state   00000001  00800065  00000654  00000708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .text.Button_init 00000008  00000624  00000624  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LED_init 0000000a  000005d4  000005d4  00000688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LED_on  0000000a  000005de  000005de  00000692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.LED_off 0000000a  000005e8  000005e8  0000069c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.LEDs_2blink 00000046  0000048a  0000048a  0000053e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.DIO_init 000000b4  000000b4  000000b4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.DIO_write 00000078  000003be  000003be  00000472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.DIO_toggle 00000038  00000512  00000512  000005c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.DIO_read 00000092  000002a2  000002a2  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.sei     0000000a  000005f2  000005f2  000006a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.ISC     0000000a  000005fc  000005fc  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.En_Ext_INT 0000000a  00000606  00000606  000006ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.interrupt_init 00000010  000005b6  000005b6  0000066a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.timer_init 0000000a  00000610  00000610  000006c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.set_prescaler 00000008  0000062c  0000062c  000006e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.timer_reset 0000000e  000005c6  000005c6  0000067a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.counter_reset 00000006  00000640  00000640  000006f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.timer_wait 00000054  00000436  00000436  000004ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .bss.overflowCounter 00000002  00800060  00800060  00000709  2**0
                  ALLOC
 45 .text.main    0000000a  0000061a  0000061a  000006ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__dummy_fini 00000002  0000064e  0000064e  00000702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__dummy_funcs_on_exit 00000002  00000650  00000650  00000704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__dummy_simulator_exit 00000002  00000652  00000652  00000706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.exit    00000016  000005a0  000005a0  00000654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text._Exit   00000004  0000064a  0000064a  000006fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_1>
   8:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
   c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  10:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  14:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  18:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  1c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  20:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  24:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  28:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  2c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  30:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  34:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  38:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  3c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  40:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  44:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  48:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  4c:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>
  50:	0c 94 23 03 	jmp	0x646	; 0x646 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 65       	ori	r16, 0x50	; 80
  58:	80 00       	.word	0x0080	; ????
  5a:	65 00       	.word	0x0065	; ????
  5c:	66 00       	.word	0x0066	; ????
  5e:	06 54       	subi	r16, 0x46	; 70

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 0d 03 	call	0x61a	; 0x61a <main>
  ac:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

00000646 <__bad_interrupt>:
 646:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.App_init:

000004d0 <App_init>:
uint8_t overflowCounterapp = 0;

void App_init()
{
		//initialize LED, Button and Timer drivers
	LED_init(LED_car, Green);
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	81 e4       	ldi	r24, 0x41	; 65
 4d4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_init>
	LED_init(LED_car, Yellow);
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	81 e4       	ldi	r24, 0x41	; 65
 4dc:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_init>
	LED_init(LED_car, Red);
 4e0:	62 e0       	ldi	r22, 0x02	; 2
 4e2:	81 e4       	ldi	r24, 0x41	; 65
 4e4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_init>
	LED_init(LED_ped, Green);
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	82 e4       	ldi	r24, 0x42	; 66
 4ec:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_init>
	LED_init(LED_ped, Yellow);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	82 e4       	ldi	r24, 0x42	; 66
 4f4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_init>
	LED_init(LED_ped, Red);
 4f8:	62 e0       	ldi	r22, 0x02	; 2
 4fa:	82 e4       	ldi	r24, 0x42	; 66
 4fc:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LED_init>
	interrupt_init();
 500:	0e 94 db 02 	call	0x5b6	; 0x5b6 <interrupt_init>
	Button_init(BUTTON_PORT,BUTTON_PIN);
 504:	62 e0       	ldi	r22, 0x02	; 2
 506:	84 e4       	ldi	r24, 0x44	; 68
 508:	0e 94 12 03 	call	0x624	; 0x624 <Button_init>
	timer_init();
 50c:	0e 94 08 03 	call	0x610	; 0x610 <timer_init>
 510:	08 95       	ret

Disassembly of section .text.ped_mode:

00000168 <ped_mode>:

	}
}

//ped_mode called inside of the timer_wait function if the button is pressed
void ped_mode(){
 168:	0f 93       	push	r16
	pressed = 0;
 16a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <pressed>
	interrupted = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <interrupted>
	switch (state)
 174:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <state>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	79 f1       	breq	.+94     	; 0x1da <ped_mode+0x72>
 17c:	10 f0       	brcs	.+4      	; 0x182 <ped_mode+0x1a>
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	e0 f5       	brcc	.+120    	; 0x1fa <ped_mode+0x92>
	{
		case greenstate: case redyellowstate: case greenyellowstate: //if it was green or yellow on make both yellows blink for 5secs and then pedestrian green and car
		LED_off(LED_ped, Red);										 //red on for 5secs
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	82 e4       	ldi	r24, 0x42	; 66
 186:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		LED_off(LED_car, Green);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e4       	ldi	r24, 0x41	; 65
 18e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		LEDs_2blink(LED_car, Yellow, LED_ped, Yellow, 5);
 192:	05 e0       	ldi	r16, 0x05	; 5
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	42 e4       	ldi	r20, 0x42	; 66
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	0e 94 45 02 	call	0x48a	; 0x48a <LEDs_2blink>
		LED_off(LED_ped, Yellow);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		LED_off(LED_car, Yellow);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e4       	ldi	r24, 0x41	; 65
 1ac:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		LED_on(LED_car, Red);
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_on>
		LED_on(LED_ped, Green);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	82 e4       	ldi	r24, 0x42	; 66
 1bc:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_on>
		timer_wait(5);
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 1b 02 	call	0x436	; 0x436 <timer_wait>
		LED_off(LED_ped, Green);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	82 e4       	ldi	r24, 0x42	; 66
 1cc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		LED_off(LED_car, Red);
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		break;
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <ped_mode+0x92>
		case redstate: //if car red-LED was on open pedestrian green-LED for 5secs
		LED_off(LED_ped, Red);
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	82 e4       	ldi	r24, 0x42	; 66
 1de:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		LED_on(LED_ped, Green);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	82 e4       	ldi	r24, 0x42	; 66
 1e6:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_on>
		timer_wait(5);
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 1b 02 	call	0x436	; 0x436 <timer_wait>
		LED_off(LED_ped, Green);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		break;
		default:
		break;
	}
	//open car green LED afterwards
	LED_on(LED_ped, Red);
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	82 e4       	ldi	r24, 0x42	; 66
 1fe:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_on>
	state = greenyellowstate;
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
	interrupted = 0;
 208:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <interrupted>
}
 20c:	0f 91       	pop	r16
 20e:	08 95       	ret

Disassembly of section .text.__vector_1:

0000057a <__vector_1>:

ISR(EXT_INT_0)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	8f 93       	push	r24
	if (!interrupted)
 586:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <interrupted>
 58a:	81 11       	cpse	r24, r1
 58c:	03 c0       	rjmp	.+6      	; 0x594 <__vector_1+0x1a>
	{
		pressed = 1;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <pressed>
	}
}
 594:	8f 91       	pop	r24
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

Disassembly of section .text.clear_interrupt:

00000634 <clear_interrupt>:

void clear_interrupt(){
	pressed = 0;
 634:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <pressed>
 638:	08 95       	ret

Disassembly of section .text.wait_interrupt:

00000210 <wait_interrupt>:
}

void wait_interrupt(uint8_t ts){
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	0f 92       	push	r0
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	18 2f       	mov	r17, r24
	set_prescaler();
 21e:	0e 94 16 03 	call	0x62c	; 0x62c <set_prescaler>
	uint8_t val;
	while(overflowCounterapp < (ts*NUMBER_OF_OVERFLOWS)){
 222:	2a c0       	rjmp	.+84     	; 0x278 <wait_interrupt+0x68>
		//interrupt during wait time
		if(pressed){
 224:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <pressed>
 228:	81 11       	cpse	r24, r1
 22a:	14 c0       	rjmp	.+40     	; 0x254 <wait_interrupt+0x44>
 22c:	1b c0       	rjmp	.+54     	; 0x264 <wait_interrupt+0x54>
			while((TIFR & (1<<0)) == 0){
				DIO_read('D', 2, &val);
 22e:	ae 01       	movw	r20, r28
 230:	4f 5f       	subi	r20, 0xFF	; 255
 232:	5f 4f       	sbci	r21, 0xFF	; 255
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	84 e4       	ldi	r24, 0x44	; 68
 238:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_read>
				if(!val){
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	81 11       	cpse	r24, r1
 240:	09 c0       	rjmp	.+18     	; 0x254 <wait_interrupt+0x44>
					overflowCounterapp = 0;
 242:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounterapp>
					timer_reset();
 246:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <timer_reset>
					counter_reset();
 24a:	0e 94 20 03 	call	0x640	; 0x640 <counter_reset>
					ped_mode();
 24e:	0e 94 b4 00 	call	0x168	; 0x168 <ped_mode>
					break;
 252:	03 c0       	rjmp	.+6      	; 0x25a <wait_interrupt+0x4a>
	set_prescaler();
	uint8_t val;
	while(overflowCounterapp < (ts*NUMBER_OF_OVERFLOWS)){
		//interrupt during wait time
		if(pressed){
			while((TIFR & (1<<0)) == 0){
 254:	08 b6       	in	r0, 0x38	; 56
 256:	00 fe       	sbrs	r0, 0
 258:	ea cf       	rjmp	.-44     	; 0x22e <wait_interrupt+0x1e>
					ped_mode();
					break;
				}
				
			}
			if(!val){
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	88 23       	and	r24, r24
 25e:	c1 f0       	breq	.+48     	; 0x290 <wait_interrupt+0x80>
				break;
			}
			else{
				clear_interrupt();
 260:	0e 94 1a 03 	call	0x634	; 0x634 <clear_interrupt>
			}
		}
		//End of interrupt statement can be removed to use as a normal timer drive
		while((TIFR & (1<<0)) == 0);
 264:	08 b6       	in	r0, 0x38	; 56
 266:	00 fe       	sbrs	r0, 0
 268:	fd cf       	rjmp	.-6      	; 0x264 <wait_interrupt+0x54>
		
		//Clear overflow flag
		timer_reset();
 26a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <timer_reset>
		overflowCounterapp++;
 26e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflowCounterapp>
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflowCounterapp>
}

void wait_interrupt(uint8_t ts){
	set_prescaler();
	uint8_t val;
	while(overflowCounterapp < (ts*NUMBER_OF_OVERFLOWS)){
 278:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <overflowCounterapp>
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	81 2f       	mov	r24, r17
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	28 17       	cp	r18, r24
 28c:	39 07       	cpc	r19, r25
 28e:	54 f2       	brlt	.-108    	; 0x224 <wait_interrupt+0x14>
		//Clear overflow flag
		timer_reset();
		overflowCounterapp++;
	}

	overflowCounterapp = 0;
 290:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounterapp>
	counter_reset();
 294:	0e 94 20 03 	call	0x640	; 0x640 <counter_reset>
}
 298:	0f 90       	pop	r0
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

Disassembly of section .text.LED_blink_interrupt:

0000054a <LED_blink_interrupt>:

void LED_blink_interrupt(uint8_t LEDport, uint8_t LEDpin, uint8_t delay){
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	08 2f       	mov	r16, r24
 554:	16 2f       	mov	r17, r22
 556:	d4 2f       	mov	r29, r20
		uint8_t count = 0;
 558:	c0 e0       	ldi	r28, 0x00	; 0
		while (count < delay)
 55a:	08 c0       	rjmp	.+16     	; 0x56c <LED_blink_interrupt+0x22>
		{
			DIO_toggle(LEDport, LEDpin);
 55c:	61 2f       	mov	r22, r17
 55e:	80 2f       	mov	r24, r16
 560:	0e 94 89 02 	call	0x512	; 0x512 <DIO_toggle>
			wait_interrupt(1);
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 08 01 	call	0x210	; 0x210 <wait_interrupt>
			count++;
 56a:	cf 5f       	subi	r28, 0xFF	; 255
	counter_reset();
}

void LED_blink_interrupt(uint8_t LEDport, uint8_t LEDpin, uint8_t delay){
		uint8_t count = 0;
		while (count < delay)
 56c:	cd 17       	cp	r28, r29
 56e:	b0 f3       	brcs	.-20     	; 0x55c <LED_blink_interrupt+0x12>
		{
			DIO_toggle(LEDport, LEDpin);
			wait_interrupt(1);
			count++;
		}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

Disassembly of section .text.Normal_mode:

00000334 <Normal_mode>:

}

void Normal_mode()
{
	switch (state){
 334:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <state>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	31 f0       	breq	.+12     	; 0x348 <Normal_mode+0x14>
 33c:	90 f0       	brcs	.+36     	; 0x362 <Normal_mode+0x2e>
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	e9 f0       	breq	.+58     	; 0x37c <Normal_mode+0x48>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	51 f1       	breq	.+84     	; 0x39a <Normal_mode+0x66>
 346:	08 95       	ret
		case redstate: //if the red-LED was on make yellow blink for five seconds
			state = greenyellowstate;
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
			LED_blink_interrupt(LED_car, Yellow, 5);
 34e:	45 e0       	ldi	r20, 0x05	; 5
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	81 e4       	ldi	r24, 0x41	; 65
 354:	0e 94 a5 02 	call	0x54a	; 0x54a <LED_blink_interrupt>
			LED_off(LED_car, Yellow);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	81 e4       	ldi	r24, 0x41	; 65
 35c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		break;
 360:	08 95       	ret
		case greenstate: //if green-LED was on make yellow blink for 5 seconds
			state = redyellowstate;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
			LED_blink_interrupt(LED_car, Yellow, 5);
 368:	45 e0       	ldi	r20, 0x05	; 5
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	0e 94 a5 02 	call	0x54a	; 0x54a <LED_blink_interrupt>
			LED_off(LED_car, Yellow);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	81 e4       	ldi	r24, 0x41	; 65
 376:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		break;
 37a:	08 95       	ret
		case redyellowstate: //if yellow is blinking after red was on make green on for five seconds
			state = redstate;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
			LED_on(LED_car, Red);
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	81 e4       	ldi	r24, 0x41	; 65
 386:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_on>
			wait_interrupt(5);
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	0e 94 08 01 	call	0x210	; 0x210 <wait_interrupt>
			LED_off(LED_car, Red);
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	81 e4       	ldi	r24, 0x41	; 65
 394:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
		break;
 398:	08 95       	ret
		case greenyellowstate: //if yellow is blinking after green was on make red on for five seconds
			state = greenstate;
 39a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <state>
			LED_on(LED_ped, Red);
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	82 e4       	ldi	r24, 0x42	; 66
 3a2:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_on>
			LED_on(LED_car, Green);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e4       	ldi	r24, 0x41	; 65
 3aa:	0e 94 ef 02 	call	0x5de	; 0x5de <LED_on>
			wait_interrupt(5);
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	0e 94 08 01 	call	0x210	; 0x210 <wait_interrupt>
			LED_off(LED_car, Green);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	81 e4       	ldi	r24, 0x41	; 65
 3b8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LED_off>
 3bc:	08 95       	ret

Disassembly of section .text.appStart:

0000063a <appStart>:
}

void appStart()
{
		//operate in normal mode if not interrupted
		Normal_mode();
 63a:	0e 94 9a 01 	call	0x334	; 0x334 <Normal_mode>
 63e:	08 95       	ret

Disassembly of section .text.Button_init:

00000624 <Button_init>:
 */ 
#include "button.h"

EN_Button_t Button_init(uint8_t buttonPort, uint8_t buttonPin)
{
	DIO_init(buttonPort, buttonPin, IN); //initialize DIO pin
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	0e 94 5a 00 	call	0xb4	; 0xb4 <__data_load_end>
	//Initialize Interrupt
}
 62a:	08 95       	ret

Disassembly of section .text.LED_init:

000005d4 <LED_init>:
 */ 
#include "led.h"

EN_LED_t LED_init(uint8_t LEDport, uint8_t LEDpin)
{
	DIO_init(LEDport, LEDpin, OUT);
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <__data_load_end>
	return LED_OK;
}
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret

Disassembly of section .text.LED_on:

000005de <LED_on>:

EN_LED_t LED_on(uint8_t LEDport, uint8_t LEDpin)
{
	DIO_write(LEDport, LEDpin, HIGH);
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_write>
	return LED_OK;
}
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	08 95       	ret

Disassembly of section .text.LED_off:

000005e8 <LED_off>:

EN_LED_t LED_off(uint8_t LEDport, uint8_t LEDpin)
{
	DIO_write(LEDport, LEDpin, LOW);
 5e8:	40 e0       	ldi	r20, 0x00	; 0
 5ea:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_write>
	return LED_OK;
}
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret

Disassembly of section .text.LEDs_2blink:

0000048a <LEDs_2blink>:
	}
	return LED_OK;
}

EN_LED_t LEDs_2blink(uint8_t LEDport1, uint8_t LEDpin1, uint8_t LEDport2, uint8_t LEDpin2,uint8_t delay)
{
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	e8 2e       	mov	r14, r24
 498:	f6 2e       	mov	r15, r22
 49a:	14 2f       	mov	r17, r20
 49c:	d2 2f       	mov	r29, r18
	uint8_t count = 0;
 49e:	c0 e0       	ldi	r28, 0x00	; 0
	while (count < delay)
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <LEDs_2blink+0x32>
	{
		DIO_toggle(LEDport1, LEDpin1);
 4a2:	6f 2d       	mov	r22, r15
 4a4:	8e 2d       	mov	r24, r14
 4a6:	0e 94 89 02 	call	0x512	; 0x512 <DIO_toggle>
		DIO_toggle(LEDport2, LEDpin2);
 4aa:	6d 2f       	mov	r22, r29
 4ac:	81 2f       	mov	r24, r17
 4ae:	0e 94 89 02 	call	0x512	; 0x512 <DIO_toggle>
		timer_wait(1);
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 1b 02 	call	0x436	; 0x436 <timer_wait>
		count++;
 4ba:	cf 5f       	subi	r28, 0xFF	; 255
}

EN_LED_t LEDs_2blink(uint8_t LEDport1, uint8_t LEDpin1, uint8_t LEDport2, uint8_t LEDpin2,uint8_t delay)
{
	uint8_t count = 0;
	while (count < delay)
 4bc:	c0 17       	cp	r28, r16
 4be:	88 f3       	brcs	.-30     	; 0x4a2 <LEDs_2blink+0x18>
		DIO_toggle(LEDport2, LEDpin2);
		timer_wait(1);
		count++;
	}
	return LED_OK;
}
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	08 95       	ret

Disassembly of section .text.DIO_init:

000000b4 <DIO_init>:

#include "dio.h"

EN_DIO_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch (portNumber)
  b4:	82 34       	cpi	r24, 0x42	; 66
  b6:	09 f1       	breq	.+66     	; 0xfa <DIO_init+0x46>
  b8:	84 34       	cpi	r24, 0x44	; 68
  ba:	d1 f1       	breq	.+116    	; 0x130 <DIO_init+0x7c>
  bc:	81 34       	cpi	r24, 0x41	; 65
  be:	09 f0       	breq	.+2      	; 0xc2 <DIO_init+0xe>
  c0:	51 c0       	rjmp	.+162    	; 0x164 <DIO_init+0xb0>
	{
		case portA:
			if (direction == IN)
  c2:	41 11       	cpse	r20, r1
  c4:	0c c0       	rjmp	.+24     	; 0xde <DIO_init+0x2a>
			{
				DDRA &= ~(1<<pinNumber);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_init+0x1e>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_init+0x1a>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	8a bb       	out	0x1a, r24	; 26
  dc:	43 c0       	rjmp	.+134    	; 0x164 <DIO_init+0xb0>
			} 
			else if (direction == OUT)
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	09 f0       	breq	.+2      	; 0xe4 <DIO_init+0x30>
  e2:	40 c0       	rjmp	.+128    	; 0x164 <DIO_init+0xb0>
			{
				DDRA |= (1<< pinNumber);
  e4:	2a b3       	in	r18, 0x1a	; 26
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_init+0x3c>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_init+0x38>
  f4:	82 2b       	or	r24, r18
  f6:	8a bb       	out	0x1a, r24	; 26
  f8:	35 c0       	rjmp	.+106    	; 0x164 <DIO_init+0xb0>
			}
		break;
		case portB:
			if (direction == IN)
  fa:	41 11       	cpse	r20, r1
  fc:	0c c0       	rjmp	.+24     	; 0x116 <DIO_init+0x62>
			{
				DDRB &= ~(1<<pinNumber);
  fe:	27 b3       	in	r18, 0x17	; 23
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_init+0x56>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_init+0x52>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	87 bb       	out	0x17, r24	; 23
 114:	27 c0       	rjmp	.+78     	; 0x164 <DIO_init+0xb0>
			}
			else if (direction == OUT)
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	29 f5       	brne	.+74     	; 0x164 <DIO_init+0xb0>
			{
				DDRB |= (1<< pinNumber);
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_init+0x72>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_init+0x6e>
 12a:	82 2b       	or	r24, r18
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	1a c0       	rjmp	.+52     	; 0x164 <DIO_init+0xb0>
			}
		break;
		case portD:
		if (direction == IN)
 130:	41 11       	cpse	r20, r1
 132:	0c c0       	rjmp	.+24     	; 0x14c <DIO_init+0x98>
		{
			DDRD &= ~(1<<pinNumber);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_init+0x8c>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_init+0x88>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	0c c0       	rjmp	.+24     	; 0x164 <DIO_init+0xb0>
		}
		else if (direction == OUT)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	51 f4       	brne	.+20     	; 0x164 <DIO_init+0xb0>
		{
			DDRD |= (1<< pinNumber);
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_init+0xa8>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_init+0xa4>
 160:	82 2b       	or	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
		}
		break;
	}
	return DIO_OK;
}
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret

Disassembly of section .text.DIO_write:

000003be <DIO_write>:

EN_DIO_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch (portNumber)
 3be:	81 34       	cpi	r24, 0x41	; 65
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <DIO_write+0xa>
 3c2:	82 34       	cpi	r24, 0x42	; 66
 3c4:	e1 f0       	breq	.+56     	; 0x3fe <DIO_write+0x40>
 3c6:	35 c0       	rjmp	.+106    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	{
		case portA:
			if (value == LOW)
 3c8:	41 11       	cpse	r20, r1
 3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <DIO_write+0x26>
			{
				PORTA &= ~(1<<pinNumber);
 3cc:	2b b3       	in	r18, 0x1b	; 27
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_write+0x1a>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_write+0x16>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	8b bb       	out	0x1b, r24	; 27
 3e2:	27 c0       	rjmp	.+78     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			}
			else if (value == HIGH)
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	29 f5       	brne	.+74     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				PORTA |= (1<< pinNumber);
 3e8:	2b b3       	in	r18, 0x1b	; 27
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_write+0x36>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_write+0x32>
 3f8:	82 2b       	or	r24, r18
 3fa:	8b bb       	out	0x1b, r24	; 27
 3fc:	1a c0       	rjmp	.+52     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			}
		break;
		case portB:
			if (value == LOW)
 3fe:	41 11       	cpse	r20, r1
 400:	0c c0       	rjmp	.+24     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			{
				PORTB &= ~(1<<pinNumber);
 402:	28 b3       	in	r18, 0x18	; 24
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	80 95       	com	r24
 414:	82 23       	and	r24, r18
 416:	88 bb       	out	0x18, r24	; 24
 418:	0c c0       	rjmp	.+24     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			}
			else if (value == HIGH)
 41a:	41 30       	cpi	r20, 0x01	; 1
 41c:	51 f4       	brne	.+20     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				PORTB |= (1<< pinNumber);
 41e:	28 b3       	in	r18, 0x18	; 24
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	88 bb       	out	0x18, r24	; 24
			}
		break;
	}
	return DIO_OK;
}
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret

Disassembly of section .text.DIO_toggle:

00000512 <DIO_toggle>:

EN_DIO_t DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch (portNumber)
 512:	81 34       	cpi	r24, 0x41	; 65
 514:	19 f0       	breq	.+6      	; 0x51c <DIO_toggle+0xa>
 516:	82 34       	cpi	r24, 0x42	; 66
 518:	61 f0       	breq	.+24     	; 0x532 <DIO_toggle+0x20>
 51a:	15 c0       	rjmp	.+42     	; 0x546 <DIO_toggle+0x34>
	{
		case portA:
			PORTA ^= (1<< pinNumber);
 51c:	2b b3       	in	r18, 0x1b	; 27
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_toggle+0x16>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_toggle+0x12>
 52c:	82 27       	eor	r24, r18
 52e:	8b bb       	out	0x1b, r24	; 27
		break;
 530:	0a c0       	rjmp	.+20     	; 0x546 <DIO_toggle+0x34>
		case portB:
			PORTB ^= (1<< pinNumber);
 532:	28 b3       	in	r18, 0x18	; 24
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_toggle+0x2c>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_toggle+0x28>
 542:	82 27       	eor	r24, r18
 544:	88 bb       	out	0x18, r24	; 24
		break;
	}
	return DIO_OK;
}
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret

Disassembly of section .text.DIO_read:

000002a2 <DIO_read>:
EN_DIO_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t* value)
{
	switch (portNumber)
 2a2:	82 34       	cpi	r24, 0x42	; 66
 2a4:	d9 f0       	breq	.+54     	; 0x2dc <DIO_read+0x3a>
 2a6:	84 34       	cpi	r24, 0x44	; 68
 2a8:	79 f1       	breq	.+94     	; 0x308 <DIO_read+0x66>
 2aa:	81 34       	cpi	r24, 0x41	; 65
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <DIO_read+0xe>
 2ae:	41 c0       	rjmp	.+130    	; 0x332 <DIO_read+0x90>
	{
		case portA:
		*value = (PINA&(1<<pinNumber))>>pinNumber;
 2b0:	79 b3       	in	r23, 0x19	; 25
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	9c 01       	movw	r18, r24
 2b8:	06 2e       	mov	r0, r22
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_read+0x1e>
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_read+0x1a>
 2c4:	87 2f       	mov	r24, r23
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	82 23       	and	r24, r18
 2ca:	93 23       	and	r25, r19
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_read+0x30>
 2ce:	95 95       	asr	r25
 2d0:	87 95       	ror	r24
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_read+0x2c>
 2d6:	fa 01       	movw	r30, r20
 2d8:	80 83       	st	Z, r24
		break;
 2da:	08 95       	ret
		case portB:
		*value = (PINB&(1<<pinNumber))>>pinNumber;
 2dc:	76 b3       	in	r23, 0x16	; 22
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	9c 01       	movw	r18, r24
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_read+0x4a>
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_read+0x46>
 2f0:	87 2f       	mov	r24, r23
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 23       	and	r24, r18
 2f6:	93 23       	and	r25, r19
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_read+0x5c>
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_read+0x58>
 302:	fa 01       	movw	r30, r20
 304:	80 83       	st	Z, r24
		break;
 306:	08 95       	ret
		case portD:
		*value = (PIND&(1<<pinNumber))>>pinNumber;
 308:	70 b3       	in	r23, 0x10	; 16
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	9c 01       	movw	r18, r24
 310:	06 2e       	mov	r0, r22
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_read+0x76>
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_read+0x72>
 31c:	87 2f       	mov	r24, r23
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_read+0x88>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_read+0x84>
 32e:	fa 01       	movw	r30, r20
 330:	80 83       	st	Z, r24
		break;
	}
	DIO_OK;
}
 332:	08 95       	ret

Disassembly of section .text.sei:

000005f2 <sei>:
 */ 
#include "interrupt.h"

EN_Interrupt_t sei()
 {
	SREG |= (1<<7); //Set interrupt flag to 1
 5f2:	8f b7       	in	r24, 0x3f	; 63
 5f4:	80 68       	ori	r24, 0x80	; 128
 5f6:	8f bf       	out	0x3f, r24	; 63
	return Interrupt_OK;
 }
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	08 95       	ret

Disassembly of section .text.ISC:

000005fc <ISC>:
 
EN_Interrupt_t ISC()
{
	MCUCR |= (1<<0) | (1<<1); //ISC00 and ISC01 = 1 1 for rising edge
 5fc:	85 b7       	in	r24, 0x35	; 53
 5fe:	83 60       	ori	r24, 0x03	; 3
 600:	85 bf       	out	0x35, r24	; 53
	return Interrupt_OK;
}
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	08 95       	ret

Disassembly of section .text.En_Ext_INT:

00000606 <En_Ext_INT>:

EN_Interrupt_t En_Ext_INT()
{
	GICR |= (1<<6); //Set bit 6 to 1 to enable INT0
 606:	8b b7       	in	r24, 0x3b	; 59
 608:	80 64       	ori	r24, 0x40	; 64
 60a:	8b bf       	out	0x3b, r24	; 59
	return Interrupt_OK;
}
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret

Disassembly of section .text.interrupt_init:

000005b6 <interrupt_init>:

EN_Interrupt_t interrupt_init(){
		sei();
 5b6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <sei>
		ISC();
 5ba:	0e 94 fe 02 	call	0x5fc	; 0x5fc <ISC>
		En_Ext_INT();
 5be:	0e 94 03 03 	call	0x606	; 0x606 <En_Ext_INT>
		return Interrupt_OK;
}
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	08 95       	ret

Disassembly of section .text.timer_init:

00000610 <timer_init>:

unsigned int overflowCounter = 0;


EN_Timer_t timer_init(){
	TCCR0 = 0x00; //Set to normal mode
 610:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x0C; //Set initial value
 612:	8c e0       	ldi	r24, 0x0C	; 12
 614:	82 bf       	out	0x32, r24	; 50
	return Timer_OK;
}
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	08 95       	ret

Disassembly of section .text.set_prescaler:

0000062c <set_prescaler>:

EN_Timer_t set_prescaler(){
	TCCR0 |= (1<<0) | (1<<2);
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	85 60       	ori	r24, 0x05	; 5
 630:	83 bf       	out	0x33, r24	; 51
}
 632:	08 95       	ret

Disassembly of section .text.timer_reset:

000005c6 <timer_reset>:
	overflowCounter = 0;
	return Timer_OK;
}

EN_Timer_t timer_reset(){
	TIFR |= (1<<0);
 5c6:	88 b7       	in	r24, 0x38	; 56
 5c8:	81 60       	ori	r24, 0x01	; 1
 5ca:	88 bf       	out	0x38, r24	; 56
	TCNT0 = 0x0C;
 5cc:	8c e0       	ldi	r24, 0x0C	; 12
 5ce:	82 bf       	out	0x32, r24	; 50
	return Timer_OK;
}
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret

Disassembly of section .text.counter_reset:

00000640 <counter_reset>:
EN_Timer_t counter_reset(){
		TCCR0 = 0x00;
 640:	13 be       	out	0x33, r1	; 51
		return Timer_OK;
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	08 95       	ret

Disassembly of section .text.timer_wait:

00000436 <timer_wait>:

EN_Timer_t set_prescaler(){
	TCCR0 |= (1<<0) | (1<<2);
}

EN_Timer_t timer_wait(unsigned int ts){
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
	set_prescaler();
 43c:	0e 94 16 03 	call	0x62c	; 0x62c <set_prescaler>
	while(overflowCounter < (ts*NUMBER_OF_OVERFLOWS)){
 440:	0e c0       	rjmp	.+28     	; 0x45e <timer_wait+0x28>
		while((TIFR & (1<<0)) == 0);
 442:	08 b6       	in	r0, 0x38	; 56
 444:	00 fe       	sbrs	r0, 0
 446:	fd cf       	rjmp	.-6      	; 0x442 <timer_wait+0xc>
		//Clear overflow flag
		timer_reset();
 448:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <timer_reset>
		overflowCounter++;
 44c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 450:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 45a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TCCR0 |= (1<<0) | (1<<2);
}

EN_Timer_t timer_wait(unsigned int ts){
	set_prescaler();
	while(overflowCounter < (ts*NUMBER_OF_OVERFLOWS)){
 45e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 462:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 466:	ce 01       	movw	r24, r28
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	28 17       	cp	r18, r24
 472:	39 07       	cpc	r19, r25
 474:	30 f3       	brcs	.-52     	; 0x442 <timer_wait+0xc>
		//Clear overflow flag
		timer_reset();
		overflowCounter++;
	}

	counter_reset();
 476:	0e 94 20 03 	call	0x640	; 0x640 <counter_reset>
	overflowCounter = 0;
 47a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 47e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	return Timer_OK;
}
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

Disassembly of section .text.main:

0000061a <main>:
 */ 
#include "App/app.h"

int main(void)
{
	App_init();
 61a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <App_init>
	while(1){
		appStart();
 61e:	0e 94 1d 03 	call	0x63a	; 0x63a <appStart>
 622:	fd cf       	rjmp	.-6      	; 0x61e <main+0x4>

Disassembly of section .text.__dummy_fini:

0000064e <_fini>:
 64e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000650 <__funcs_on_exit>:
 650:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000652 <__simulator_exit>:
 652:	08 95       	ret

Disassembly of section .text.exit:

000005a0 <exit>:
 5a0:	ec 01       	movw	r28, r24
 5a2:	0e 94 28 03 	call	0x650	; 0x650 <__funcs_on_exit>
 5a6:	0e 94 27 03 	call	0x64e	; 0x64e <_fini>
 5aa:	ce 01       	movw	r24, r28
 5ac:	0e 94 29 03 	call	0x652	; 0x652 <__simulator_exit>
 5b0:	ce 01       	movw	r24, r28
 5b2:	0e 94 25 03 	call	0x64a	; 0x64a <_Exit>

Disassembly of section .text._Exit:

0000064a <_Exit>:
 64a:	0e 94 58 00 	call	0xb0	; 0xb0 <_exit>
