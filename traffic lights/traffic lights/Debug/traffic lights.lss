
traffic lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006e1  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000006e1  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001eb1  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3a  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2d  00000000  00000000  00003161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00003b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b9  00000000  00000000  00003df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065e  00000000  00000000  000040ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  0000470b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000005fe  000005fe  000006d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000047f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Normal_mode 0000008e  0000035c  0000035c  00000430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.appStart 00000042  000004a8  000004a8  0000057c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ped_mode 000000a8  00000222  00000222  000002f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_1 00000026  00000556  00000556  0000062a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.clear_interrupt 00000006  000005f8  000005f8  000006cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.interrupted 00000001  00800062  00800062  000006e1  2**0
                  ALLOC
 20 .data.state   00000001  00800063  0000060c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.Button_init 00000016  0000057c  0000057c  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LED_init 0000000a  000005a8  000005a8  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LED_on  0000000a  000005b2  000005b2  00000686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LED_off 0000000a  000005bc  000005bc  00000690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LED_blink 00000034  00000522  00000522  000005f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LEDs_2blink 00000046  00000462  00000462  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.DIO_init 000000b4  000000ba  000000ba  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.DIO_write 00000078  000003ea  000003ea  000004be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.DIO_toggle 00000038  000004ea  000004ea  000005be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.DIO_read 00000092  000002ca  000002ca  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.sei     0000000a  000005c6  000005c6  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.ISC     0000000a  000005d0  000005d0  000006a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.En_Ext_INT 0000000a  000005da  000005da  000006ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.timer_init 0000000a  000005e4  000005e4  000006b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.timer_wait 000000b4  0000016e  0000016e  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .bss.pressed  00000001  00800064  00800064  000006e1  2**0
                  ALLOC
 37 .bss.overflowCounter 00000002  00800060  00800060  000006e1  2**0
                  ALLOC
 38 .text.main    0000000a  000005ee  000005ee  000006c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_fini 00000002  00000606  00000606  000006da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_funcs_on_exit 00000002  00000608  00000608  000006dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_simulator_exit 00000002  0000060a  0000060a  000006de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.exit    00000016  00000592  00000592  00000666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text._Exit   00000004  00000602  00000602  000006d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_1>
   8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
   c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  10:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  14:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  18:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  1c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  20:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  24:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  28:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  2c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  30:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  34:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  38:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  3c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  40:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  44:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  48:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  4c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
  50:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 63       	ori	r16, 0x30	; 48
  58:	80 00       	.word	0x0080	; ????
  5a:	63 00       	.word	0x0063	; ????
  5c:	64 00       	.word	0x0064	; ????
  5e:	06 0c       	add	r0, r6
  60:	00 64       	ori	r16, 0x40	; 64
  62:	00 65       	ori	r16, 0x50	; 80
  64:	80 00       	.word	0x0080	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	e4 e5       	ldi	r30, 0x54	; 84
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__do_clear_bss+0x8>
  7a:	b5 91       	lpm	r27, Z+
  7c:	a5 91       	lpm	r26, Z+
  7e:	35 91       	lpm	r19, Z+
  80:	25 91       	lpm	r18, Z+
  82:	05 91       	lpm	r16, Z+
  84:	07 fd       	sbrc	r16, 7
  86:	0c c0       	rjmp	.+24     	; 0xa0 <__do_clear_bss>
  88:	95 91       	lpm	r25, Z+
  8a:	85 91       	lpm	r24, Z+
  8c:	ef 01       	movw	r28, r30
  8e:	f9 2f       	mov	r31, r25
  90:	e8 2f       	mov	r30, r24
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0x20>
  9c:	fe 01       	movw	r30, r28
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__do_clear_bss+0x8>

000000a0 <__do_clear_bss>:
  a0:	1d 92       	st	X+, r1
  a2:	a2 17       	cp	r26, r18
  a4:	b3 07       	cpc	r27, r19
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__do_clear_bss>
  a8:	e5 36       	cpi	r30, 0x65	; 101
  aa:	f4 07       	cpc	r31, r20
  ac:	31 f7       	brne	.-52     	; 0x7a <__do_copy_data+0x8>
  ae:	0e 94 f7 02 	call	0x5ee	; 0x5ee <main>
  b2:	0c 94 c9 02 	jmp	0x592	; 0x592 <exit>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>

Disassembly of section .text:

000005fe <__bad_interrupt>:
 5fe:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Normal_mode:

0000035c <Normal_mode>:

}

void Normal_mode()
{
	switch (state){
 35c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <state>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	31 f0       	breq	.+12     	; 0x370 <Normal_mode+0x14>
 364:	90 f0       	brcs	.+36     	; 0x38a <Normal_mode+0x2e>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	e9 f0       	breq	.+58     	; 0x3a4 <Normal_mode+0x48>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	59 f1       	breq	.+86     	; 0x3c4 <Normal_mode+0x68>
 36e:	08 95       	ret
		case redstate: //if the red-LED was on make yellow blink for five seconds
			state = greenyellowstate;
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <state>
			LED_blink(LED_car, Yellow, 5);
 376:	45 e0       	ldi	r20, 0x05	; 5
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e4       	ldi	r24, 0x41	; 65
 37c:	0e 94 91 02 	call	0x522	; 0x522 <LED_blink>
			LED_off(LED_car, Yellow);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	81 e4       	ldi	r24, 0x41	; 65
 384:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		break;
 388:	08 95       	ret
		case greenstate: //if green-LED was on make yellow blink for 5 seconds
			state = redyellowstate;
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <state>
			LED_blink(LED_car, Yellow, 5);
 390:	45 e0       	ldi	r20, 0x05	; 5
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 e4       	ldi	r24, 0x41	; 65
 396:	0e 94 91 02 	call	0x522	; 0x522 <LED_blink>
			LED_off(LED_car, Yellow);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	81 e4       	ldi	r24, 0x41	; 65
 39e:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		break;
 3a2:	08 95       	ret
		case redyellowstate: //if yellow is blinking after red was on make green on for five seconds
			state = redstate;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <state>
			LED_on(LED_car, Red);
 3aa:	62 e0       	ldi	r22, 0x02	; 2
 3ac:	81 e4       	ldi	r24, 0x41	; 65
 3ae:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LED_on>
			timer_wait(5);
 3b2:	85 e0       	ldi	r24, 0x05	; 5
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 b7 00 	call	0x16e	; 0x16e <timer_wait>
			LED_off(LED_car, Red);
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	81 e4       	ldi	r24, 0x41	; 65
 3be:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		break;
 3c2:	08 95       	ret
		case greenyellowstate: //if yellow is blinking after green was on make red on for five seconds
			state = greenstate;
 3c4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <state>
			LED_on(LED_ped, Red);
 3c8:	62 e0       	ldi	r22, 0x02	; 2
 3ca:	82 e4       	ldi	r24, 0x42	; 66
 3cc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LED_on>
			LED_on(LED_car, Green);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	81 e4       	ldi	r24, 0x41	; 65
 3d4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LED_on>
			timer_wait(5);
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 b7 00 	call	0x16e	; 0x16e <timer_wait>
			LED_off(LED_car, Green);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	81 e4       	ldi	r24, 0x41	; 65
 3e4:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
 3e8:	08 95       	ret

Disassembly of section .text.appStart:

000004a8 <appStart>:
uint8_t interrupted = 0;

void appStart()
{
	//initialize LED, Button and Timer drivers
	LED_init(LED_car, Green);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	81 e4       	ldi	r24, 0x41	; 65
 4ac:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_init>
	LED_init(LED_car, Yellow);
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	81 e4       	ldi	r24, 0x41	; 65
 4b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_init>
	LED_init(LED_car, Red);
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	81 e4       	ldi	r24, 0x41	; 65
 4bc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_init>
	LED_init(LED_ped, Green);
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	82 e4       	ldi	r24, 0x42	; 66
 4c4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_init>
	LED_init(LED_ped, Yellow);
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	82 e4       	ldi	r24, 0x42	; 66
 4cc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_init>
	LED_init(LED_ped, Red);
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	82 e4       	ldi	r24, 0x42	; 66
 4d4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_init>
	Button_init(BUTTON_PORT,BUTTON_PIN);
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	84 e4       	ldi	r24, 0x44	; 68
 4dc:	0e 94 be 02 	call	0x57c	; 0x57c <Button_init>
	timer_init();
 4e0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <timer_init>
	while(1)
	{
		//operate in normal mode if not interrupted
		Normal_mode();
 4e4:	0e 94 ae 01 	call	0x35c	; 0x35c <Normal_mode>
 4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <appStart+0x3c>

Disassembly of section .text.ped_mode:

00000222 <ped_mode>:

	}
}

//ped_mode called inside of the timer_wait function if the button is pressed
void ped_mode(){
 222:	0f 93       	push	r16
	pressed = 0;
 224:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <pressed>
	interrupted = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <interrupted>
	switch (state)
 22e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <state>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	79 f1       	breq	.+94     	; 0x294 <ped_mode+0x72>
 236:	10 f0       	brcs	.+4      	; 0x23c <ped_mode+0x1a>
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	e0 f5       	brcc	.+120    	; 0x2b4 <ped_mode+0x92>
	{
		case greenstate: case redyellowstate: case greenyellowstate: //if it was green or yellow on make both yellows blink for 5secs and then pedestrian green and car
		LED_off(LED_ped, Red);										 //red on for 5secs
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		LED_off(LED_car, Green);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	81 e4       	ldi	r24, 0x41	; 65
 248:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		LEDs_2blink(LED_car, Yellow, LED_ped, Yellow, 5);
 24c:	05 e0       	ldi	r16, 0x05	; 5
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	42 e4       	ldi	r20, 0x42	; 66
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	81 e4       	ldi	r24, 0x41	; 65
 256:	0e 94 31 02 	call	0x462	; 0x462 <LEDs_2blink>
		LED_off(LED_ped, Yellow);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	82 e4       	ldi	r24, 0x42	; 66
 25e:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		LED_off(LED_car, Yellow);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		LED_on(LED_car, Red);
 26a:	62 e0       	ldi	r22, 0x02	; 2
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LED_on>
		LED_on(LED_ped, Green);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	82 e4       	ldi	r24, 0x42	; 66
 276:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LED_on>
		timer_wait(5);
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 b7 00 	call	0x16e	; 0x16e <timer_wait>
		LED_off(LED_ped, Green);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		LED_off(LED_car, Red);
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		break;
 292:	10 c0       	rjmp	.+32     	; 0x2b4 <ped_mode+0x92>
		case redstate: //if car red-LED was on open pedestrian green-LED for 5secs
		LED_off(LED_ped, Red);
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	82 e4       	ldi	r24, 0x42	; 66
 298:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		LED_on(LED_ped, Green);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	82 e4       	ldi	r24, 0x42	; 66
 2a0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LED_on>
		timer_wait(5);
 2a4:	85 e0       	ldi	r24, 0x05	; 5
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 b7 00 	call	0x16e	; 0x16e <timer_wait>
		LED_off(LED_ped, Green);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	82 e4       	ldi	r24, 0x42	; 66
 2b0:	0e 94 de 02 	call	0x5bc	; 0x5bc <LED_off>
		break;
		default:
		break;
	}
	//open car green LED afterwards
	LED_on(LED_ped, Red);
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	82 e4       	ldi	r24, 0x42	; 66
 2b8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LED_on>
	state = greenyellowstate;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <state>
	interrupted = 0;
 2c2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <interrupted>
}
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

Disassembly of section .text.__vector_1:

00000556 <__vector_1>:

ISR(EXT_INT_0)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	8f 93       	push	r24
	if (!interrupted)
 562:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <interrupted>
 566:	81 11       	cpse	r24, r1
 568:	03 c0       	rjmp	.+6      	; 0x570 <__vector_1+0x1a>
	{
		pressed = 1;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <pressed>
	}
}
 570:	8f 91       	pop	r24
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

Disassembly of section .text.clear_interrupt:

000005f8 <clear_interrupt>:

void clear_interrupt(){
	pressed = 0;
 5f8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <pressed>
 5fc:	08 95       	ret

Disassembly of section .text.Button_init:

0000057c <Button_init>:
 */ 
#include "button.h"

EN_Button_t Button_init(uint8_t buttonPort, uint8_t buttonPin)
{
	DIO_init(buttonPort, buttonPin, IN); //initialize DIO pin
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	0e 94 5d 00 	call	0xba	; 0xba <__data_load_end>
	//Initialize Interrupt
	sei();
 582:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <sei>
	ISC();
 586:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ISC>
	En_Ext_INT();
 58a:	0e 94 ed 02 	call	0x5da	; 0x5da <En_Ext_INT>
	return Button_OK;
}
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	08 95       	ret

Disassembly of section .text.LED_init:

000005a8 <LED_init>:
 */ 
#include "led.h"

EN_LED_t LED_init(uint8_t LEDport, uint8_t LEDpin)
{
	DIO_init(LEDport, LEDpin, OUT);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	0e 94 5d 00 	call	0xba	; 0xba <__data_load_end>
	return LED_OK;
}
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	08 95       	ret

Disassembly of section .text.LED_on:

000005b2 <LED_on>:

EN_LED_t LED_on(uint8_t LEDport, uint8_t LEDpin)
{
	DIO_write(LEDport, LEDpin, HIGH);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_write>
	return LED_OK;
}
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret

Disassembly of section .text.LED_off:

000005bc <LED_off>:

EN_LED_t LED_off(uint8_t LEDport, uint8_t LEDpin)
{
	DIO_write(LEDport, LEDpin, LOW);
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_write>
	return LED_OK;
}
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	08 95       	ret

Disassembly of section .text.LED_blink:

00000522 <LED_blink>:

EN_LED_t LED_blink(uint8_t LEDport, uint8_t LEDpin, uint8_t delay)
{
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	08 2f       	mov	r16, r24
 52c:	16 2f       	mov	r17, r22
 52e:	d4 2f       	mov	r29, r20
	uint8_t count = 0;
 530:	c0 e0       	ldi	r28, 0x00	; 0
	while (count < delay)
 532:	09 c0       	rjmp	.+18     	; 0x546 <LED_blink+0x24>
	{
		DIO_toggle(LEDport, LEDpin);
 534:	61 2f       	mov	r22, r17
 536:	80 2f       	mov	r24, r16
 538:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_toggle>
		timer_wait(1);
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 b7 00 	call	0x16e	; 0x16e <timer_wait>
		count++;
 544:	cf 5f       	subi	r28, 0xFF	; 255
}

EN_LED_t LED_blink(uint8_t LEDport, uint8_t LEDpin, uint8_t delay)
{
	uint8_t count = 0;
	while (count < delay)
 546:	cd 17       	cp	r28, r29
 548:	a8 f3       	brcs	.-22     	; 0x534 <LED_blink+0x12>
		DIO_toggle(LEDport, LEDpin);
		timer_wait(1);
		count++;
	}
	return LED_OK;
}
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	08 95       	ret

Disassembly of section .text.LEDs_2blink:

00000462 <LEDs_2blink>:

EN_LED_t LEDs_2blink(uint8_t LEDport1, uint8_t LEDpin1, uint8_t LEDport2, uint8_t LEDpin2,uint8_t delay)
{
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	e8 2e       	mov	r14, r24
 470:	f6 2e       	mov	r15, r22
 472:	14 2f       	mov	r17, r20
 474:	d2 2f       	mov	r29, r18
	uint8_t count = 0;
 476:	c0 e0       	ldi	r28, 0x00	; 0
	while (count < delay)
 478:	0d c0       	rjmp	.+26     	; 0x494 <LEDs_2blink+0x32>
	{
		DIO_toggle(LEDport1, LEDpin1);
 47a:	6f 2d       	mov	r22, r15
 47c:	8e 2d       	mov	r24, r14
 47e:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_toggle>
		DIO_toggle(LEDport2, LEDpin2);
 482:	6d 2f       	mov	r22, r29
 484:	81 2f       	mov	r24, r17
 486:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_toggle>
		timer_wait(1);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 b7 00 	call	0x16e	; 0x16e <timer_wait>
		count++;
 492:	cf 5f       	subi	r28, 0xFF	; 255
}

EN_LED_t LEDs_2blink(uint8_t LEDport1, uint8_t LEDpin1, uint8_t LEDport2, uint8_t LEDpin2,uint8_t delay)
{
	uint8_t count = 0;
	while (count < delay)
 494:	c0 17       	cp	r28, r16
 496:	88 f3       	brcs	.-30     	; 0x47a <LEDs_2blink+0x18>
		DIO_toggle(LEDport2, LEDpin2);
		timer_wait(1);
		count++;
	}
	return LED_OK;
}
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	08 95       	ret

Disassembly of section .text.DIO_init:

000000ba <DIO_init>:

#include "dio.h"

EN_DIO_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch (portNumber)
  ba:	82 34       	cpi	r24, 0x42	; 66
  bc:	09 f1       	breq	.+66     	; 0x100 <DIO_init+0x46>
  be:	84 34       	cpi	r24, 0x44	; 68
  c0:	d1 f1       	breq	.+116    	; 0x136 <DIO_init+0x7c>
  c2:	81 34       	cpi	r24, 0x41	; 65
  c4:	09 f0       	breq	.+2      	; 0xc8 <DIO_init+0xe>
  c6:	51 c0       	rjmp	.+162    	; 0x16a <DIO_init+0xb0>
	{
		case portA:
			if (direction == IN)
  c8:	41 11       	cpse	r20, r1
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <DIO_init+0x2a>
			{
				DDRA &= ~(1<<pinNumber);
  cc:	2a b3       	in	r18, 0x1a	; 26
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_init+0x1e>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_init+0x1a>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	43 c0       	rjmp	.+134    	; 0x16a <DIO_init+0xb0>
			} 
			else if (direction == OUT)
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	09 f0       	breq	.+2      	; 0xea <DIO_init+0x30>
  e8:	40 c0       	rjmp	.+128    	; 0x16a <DIO_init+0xb0>
			{
				DDRA |= (1<< pinNumber);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_init+0x3c>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_init+0x38>
  fa:	82 2b       	or	r24, r18
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	35 c0       	rjmp	.+106    	; 0x16a <DIO_init+0xb0>
			}
		break;
		case portB:
			if (direction == IN)
 100:	41 11       	cpse	r20, r1
 102:	0c c0       	rjmp	.+24     	; 0x11c <DIO_init+0x62>
			{
				DDRB &= ~(1<<pinNumber);
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_init+0x56>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_init+0x52>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	27 c0       	rjmp	.+78     	; 0x16a <DIO_init+0xb0>
			}
			else if (direction == OUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	29 f5       	brne	.+74     	; 0x16a <DIO_init+0xb0>
			{
				DDRB |= (1<< pinNumber);
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_init+0x72>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_init+0x6e>
 130:	82 2b       	or	r24, r18
 132:	87 bb       	out	0x17, r24	; 23
 134:	1a c0       	rjmp	.+52     	; 0x16a <DIO_init+0xb0>
			}
		break;
		case portD:
		if (direction == IN)
 136:	41 11       	cpse	r20, r1
 138:	0c c0       	rjmp	.+24     	; 0x152 <DIO_init+0x98>
		{
			DDRD &= ~(1<<pinNumber);
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_init+0x8c>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_init+0x88>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	81 bb       	out	0x11, r24	; 17
 150:	0c c0       	rjmp	.+24     	; 0x16a <DIO_init+0xb0>
		}
		else if (direction == OUT)
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	51 f4       	brne	.+20     	; 0x16a <DIO_init+0xb0>
		{
			DDRD |= (1<< pinNumber);
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_init+0xa8>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_init+0xa4>
 166:	82 2b       	or	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
		}
		break;
	}
	return DIO_OK;
}
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

Disassembly of section .text.DIO_write:

000003ea <DIO_write>:

EN_DIO_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch (portNumber)
 3ea:	81 34       	cpi	r24, 0x41	; 65
 3ec:	19 f0       	breq	.+6      	; 0x3f4 <DIO_write+0xa>
 3ee:	82 34       	cpi	r24, 0x42	; 66
 3f0:	e1 f0       	breq	.+56     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3f2:	35 c0       	rjmp	.+106    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
	{
		case portA:
			if (value == LOW)
 3f4:	41 11       	cpse	r20, r1
 3f6:	0c c0       	rjmp	.+24     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			{
				PORTA &= ~(1<<pinNumber);
 3f8:	2b b3       	in	r18, 0x1b	; 27
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	82 23       	and	r24, r18
 40c:	8b bb       	out	0x1b, r24	; 27
 40e:	27 c0       	rjmp	.+78     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			}
			else if (value == HIGH)
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	29 f5       	brne	.+74     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			{
				PORTA |= (1<< pinNumber);
 414:	2b b3       	in	r18, 0x1b	; 27
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	82 2b       	or	r24, r18
 426:	8b bb       	out	0x1b, r24	; 27
 428:	1a c0       	rjmp	.+52     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			}
		break;
		case portB:
			if (value == LOW)
 42a:	41 11       	cpse	r20, r1
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			{
				PORTB &= ~(1<<pinNumber);
 42e:	28 b3       	in	r18, 0x18	; 24
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	80 95       	com	r24
 440:	82 23       	and	r24, r18
 442:	88 bb       	out	0x18, r24	; 24
 444:	0c c0       	rjmp	.+24     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			}
			else if (value == HIGH)
 446:	41 30       	cpi	r20, 0x01	; 1
 448:	51 f4       	brne	.+20     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			{
				PORTB |= (1<< pinNumber);
 44a:	28 b3       	in	r18, 0x18	; 24
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	82 2b       	or	r24, r18
 45c:	88 bb       	out	0x18, r24	; 24
			}
		break;
	}
	return DIO_OK;
}
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	08 95       	ret

Disassembly of section .text.DIO_toggle:

000004ea <DIO_toggle>:

EN_DIO_t DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch (portNumber)
 4ea:	81 34       	cpi	r24, 0x41	; 65
 4ec:	19 f0       	breq	.+6      	; 0x4f4 <DIO_toggle+0xa>
 4ee:	82 34       	cpi	r24, 0x42	; 66
 4f0:	61 f0       	breq	.+24     	; 0x50a <DIO_toggle+0x20>
 4f2:	15 c0       	rjmp	.+42     	; 0x51e <DIO_toggle+0x34>
	{
		case portA:
			PORTA ^= (1<< pinNumber);
 4f4:	2b b3       	in	r18, 0x1b	; 27
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_toggle+0x16>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_toggle+0x12>
 504:	82 27       	eor	r24, r18
 506:	8b bb       	out	0x1b, r24	; 27
		break;
 508:	0a c0       	rjmp	.+20     	; 0x51e <DIO_toggle+0x34>
		case portB:
			PORTB ^= (1<< pinNumber);
 50a:	28 b3       	in	r18, 0x18	; 24
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_toggle+0x2c>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_toggle+0x28>
 51a:	82 27       	eor	r24, r18
 51c:	88 bb       	out	0x18, r24	; 24
		break;
	}
	return DIO_OK;
}
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	08 95       	ret

Disassembly of section .text.DIO_read:

000002ca <DIO_read>:
EN_DIO_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t* value)
{
	switch (portNumber)
 2ca:	82 34       	cpi	r24, 0x42	; 66
 2cc:	d9 f0       	breq	.+54     	; 0x304 <DIO_read+0x3a>
 2ce:	84 34       	cpi	r24, 0x44	; 68
 2d0:	79 f1       	breq	.+94     	; 0x330 <DIO_read+0x66>
 2d2:	81 34       	cpi	r24, 0x41	; 65
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <DIO_read+0xe>
 2d6:	41 c0       	rjmp	.+130    	; 0x35a <DIO_read+0x90>
	{
		case portA:
		*value = (PINA&(1<<pinNumber))>>pinNumber;
 2d8:	79 b3       	in	r23, 0x19	; 25
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	9c 01       	movw	r18, r24
 2e0:	06 2e       	mov	r0, r22
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_read+0x1e>
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_read+0x1a>
 2ec:	87 2f       	mov	r24, r23
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	82 23       	and	r24, r18
 2f2:	93 23       	and	r25, r19
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_read+0x30>
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_read+0x2c>
 2fe:	fa 01       	movw	r30, r20
 300:	80 83       	st	Z, r24
		break;
 302:	08 95       	ret
		case portB:
		*value = (PINB&(1<<pinNumber))>>pinNumber;
 304:	76 b3       	in	r23, 0x16	; 22
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	9c 01       	movw	r18, r24
 30c:	06 2e       	mov	r0, r22
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_read+0x4a>
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_read+0x46>
 318:	87 2f       	mov	r24, r23
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	82 23       	and	r24, r18
 31e:	93 23       	and	r25, r19
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_read+0x5c>
 322:	95 95       	asr	r25
 324:	87 95       	ror	r24
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_read+0x58>
 32a:	fa 01       	movw	r30, r20
 32c:	80 83       	st	Z, r24
		break;
 32e:	08 95       	ret
		case portD:
		*value = (PIND&(1<<pinNumber))>>pinNumber;
 330:	70 b3       	in	r23, 0x10	; 16
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	9c 01       	movw	r18, r24
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_read+0x76>
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_read+0x72>
 344:	87 2f       	mov	r24, r23
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	82 23       	and	r24, r18
 34a:	93 23       	and	r25, r19
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_read+0x88>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_read+0x84>
 356:	fa 01       	movw	r30, r20
 358:	80 83       	st	Z, r24
		break;
	}
	DIO_OK;
}
 35a:	08 95       	ret

Disassembly of section .text.sei:

000005c6 <sei>:
 */ 
#include "interrupt.h"

EN_Interrupt_t sei()
 {
	SREG |= (1<<7); //Set interrupt flag to 1
 5c6:	8f b7       	in	r24, 0x3f	; 63
 5c8:	80 68       	ori	r24, 0x80	; 128
 5ca:	8f bf       	out	0x3f, r24	; 63
	return Interrupt_OK;
 }
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret

Disassembly of section .text.ISC:

000005d0 <ISC>:
 
EN_Interrupt_t ISC()
{
	MCUCR |= (1<<0) | (1<<1); //ISC00 and ISC01 = 1 1 for rising edge
 5d0:	85 b7       	in	r24, 0x35	; 53
 5d2:	83 60       	ori	r24, 0x03	; 3
 5d4:	85 bf       	out	0x35, r24	; 53
	return Interrupt_OK;
}
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	08 95       	ret

Disassembly of section .text.En_Ext_INT:

000005da <En_Ext_INT>:

EN_Interrupt_t En_Ext_INT()
{
	GICR |= (1<<6); //Set bit 6 to 1 to enable INT0
 5da:	8b b7       	in	r24, 0x3b	; 59
 5dc:	80 64       	ori	r24, 0x40	; 64
 5de:	8b bf       	out	0x3b, r24	; 59
	return Interrupt_OK;
}
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	08 95       	ret

Disassembly of section .text.timer_init:

000005e4 <timer_init>:
unsigned int overflowCounter = 0;
extern uint8_t pressed = 0;


EN_Timer_t timer_init(){
	TCCR0 = 0x00; //Set to normal mode
 5e4:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x0C; //Set initial value
 5e6:	8c e0       	ldi	r24, 0x0C	; 12
 5e8:	82 bf       	out	0x32, r24	; 50
	return Timer_OK;
}
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	08 95       	ret

Disassembly of section .text.timer_wait:

0000016e <timer_wait>:

EN_Timer_t timer_wait(unsigned int ts){
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	0f 92       	push	r0
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	8c 01       	movw	r16, r24
	TCCR0 |= (1<<0) | (1<<2); //1024 prescaler
 17e:	83 b7       	in	r24, 0x33	; 51
 180:	85 60       	ori	r24, 0x05	; 5
 182:	83 bf       	out	0x33, r24	; 51
	uint8_t val;
	while(overflowCounter < (ts*NUMBER_OF_OVERFLOWS)){
 184:	35 c0       	rjmp	.+106    	; 0x1f0 <timer_wait+0x82>
		//interrupt during wait time
		if(pressed){
 186:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <pressed>
 18a:	81 11       	cpse	r24, r1
 18c:	18 c0       	rjmp	.+48     	; 0x1be <timer_wait+0x50>
 18e:	1f c0       	rjmp	.+62     	; 0x1ce <timer_wait+0x60>
			while((TIFR & (1<<0)) == 0){
				DIO_read('D', 2, &val);
 190:	ae 01       	movw	r20, r28
 192:	4f 5f       	subi	r20, 0xFF	; 255
 194:	5f 4f       	sbci	r21, 0xFF	; 255
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	84 e4       	ldi	r24, 0x44	; 68
 19a:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_read>
				if(!val){
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	81 11       	cpse	r24, r1
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <timer_wait+0x50>
					overflowCounter = 0;
 1a4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					TIFR |= (1<<0);
 1ac:	88 b7       	in	r24, 0x38	; 56
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	88 bf       	out	0x38, r24	; 56
					TCNT0 = 0x0C;
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	82 bf       	out	0x32, r24	; 50
					TCCR0 = 0x00;
 1b6:	13 be       	out	0x33, r1	; 51
					ped_mode();
 1b8:	0e 94 11 01 	call	0x222	; 0x222 <ped_mode>
					break;
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <timer_wait+0x56>
	TCCR0 |= (1<<0) | (1<<2); //1024 prescaler
	uint8_t val;
	while(overflowCounter < (ts*NUMBER_OF_OVERFLOWS)){
		//interrupt during wait time
		if(pressed){
			while((TIFR & (1<<0)) == 0){
 1be:	08 b6       	in	r0, 0x38	; 56
 1c0:	00 fe       	sbrs	r0, 0
 1c2:	e6 cf       	rjmp	.-52     	; 0x190 <timer_wait+0x22>
					ped_mode();
					break;
				}
				
			}
			if(!val){
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 23       	and	r24, r24
 1c8:	01 f1       	breq	.+64     	; 0x20a <timer_wait+0x9c>
				break;
			}
			else{
			clear_interrupt();
 1ca:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <clear_interrupt>
			}
		}
		//End of interrupt statement can be removed to use as a normal timer drive
		while((TIFR & (1<<0)) == 0);
 1ce:	08 b6       	in	r0, 0x38	; 56
 1d0:	00 fe       	sbrs	r0, 0
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <timer_wait+0x60>
		
		//Clear overflow flag
		TIFR |= (1<<0);
 1d4:	88 b7       	in	r24, 0x38	; 56
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	88 bf       	out	0x38, r24	; 56
		TCNT0 = 0x0C;
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	82 bf       	out	0x32, r24	; 50
		overflowCounter++;
 1de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}

EN_Timer_t timer_wait(unsigned int ts){
	TCCR0 |= (1<<0) | (1<<2); //1024 prescaler
	uint8_t val;
	while(overflowCounter < (ts*NUMBER_OF_OVERFLOWS)){
 1f0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	c8 01       	movw	r24, r16
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	28 17       	cp	r18, r24
 204:	39 07       	cpc	r19, r25
 206:	08 f4       	brcc	.+2      	; 0x20a <timer_wait+0x9c>
 208:	be cf       	rjmp	.-132    	; 0x186 <timer_wait+0x18>
		TIFR |= (1<<0);
		TCNT0 = 0x0C;
		overflowCounter++;
	}

	overflowCounter = 0;
 20a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 20e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	TCCR0 = 0x00;
 212:	13 be       	out	0x33, r1	; 51
	return Timer_OK;
}
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

Disassembly of section .text.main:

000005ee <main>:
 */ 
#include "App/app.h"

int main(void)
{
	appStart();
 5ee:	0e 94 54 02 	call	0x4a8	; 0x4a8 <appStart>
}
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000606 <_fini>:
 606:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000608 <__funcs_on_exit>:
 608:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000060a <__simulator_exit>:
 60a:	08 95       	ret

Disassembly of section .text.exit:

00000592 <exit>:
 592:	ec 01       	movw	r28, r24
 594:	0e 94 04 03 	call	0x608	; 0x608 <__funcs_on_exit>
 598:	0e 94 03 03 	call	0x606	; 0x606 <_fini>
 59c:	ce 01       	movw	r24, r28
 59e:	0e 94 05 03 	call	0x60a	; 0x60a <__simulator_exit>
 5a2:	ce 01       	movw	r24, r28
 5a4:	0e 94 01 03 	call	0x602	; 0x602 <_Exit>

Disassembly of section .text._Exit:

00000602 <_Exit>:
 602:	0e 94 5b 00 	call	0xb6	; 0xb6 <_exit>
